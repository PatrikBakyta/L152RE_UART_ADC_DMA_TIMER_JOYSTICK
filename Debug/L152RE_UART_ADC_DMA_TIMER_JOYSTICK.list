
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\L152RE_UART_ADC_DMA_TIMER_JOYSTICK\Debug\L152RE_UART_ADC_DMA_TIMER_JOYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002300  08002300  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000058  20000000  08002308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000058  08002360  00020058  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000090  08002360  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  9 .debug_info   000060be  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f26  00000000  00000000  0002613f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008a8  00000000  00000000  00027068  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  00027910  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002afa  00000000  00000000  00028100  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029ec  00000000  00000000  0002abfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002d5e6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002550  00000000  00000000  0002d664  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000058 	.word	0x20000058
 8000158:	00000000 	.word	0x00000000
 800015c:	080022e8 	.word	0x080022e8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000005c 	.word	0x2000005c
 8000178:	080022e8 	.word	0x080022e8

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	bf14      	ite	ne
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e720      	b.n	80002c0 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aedc 	beq.w	800026e <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6c1      	b.n	800026e <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2iz>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d215      	bcs.n	8000946 <__aeabi_d2iz+0x36>
 800091a:	d511      	bpl.n	8000940 <__aeabi_d2iz+0x30>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d912      	bls.n	800094c <__aeabi_d2iz+0x3c>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000936:	fa23 f002 	lsr.w	r0, r3, r2
 800093a:	bf18      	it	ne
 800093c:	4240      	negne	r0, r0
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d105      	bne.n	8000958 <__aeabi_d2iz+0x48>
 800094c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000950:	bf08      	it	eq
 8000952:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000956:	4770      	bx	lr
 8000958:	f04f 0000 	mov.w	r0, #0
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	2300      	movs	r3, #0
 800096e:	73bb      	strb	r3, [r7, #14]
 8000970:	230f      	movs	r3, #15
 8000972:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	78db      	ldrb	r3, [r3, #3]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d038      	beq.n	80009ee <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <NVIC_Init+0xb8>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	43db      	mvns	r3, r3
 8000982:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	f1c3 0304 	rsb	r3, r3, #4
 8000990:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000992:	7b7a      	ldrb	r2, [r7, #13]
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	fa42 f303 	asr.w	r3, r2, r3
 800099a:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	461a      	mov	r2, r3
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	789a      	ldrb	r2, [r3, #2]
 80009ae:	7b7b      	ldrb	r3, [r7, #13]
 80009b0:	4013      	ands	r3, r2
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80009c0:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <NVIC_Init+0xbc>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <NVIC_Init+0xbc>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f003 031f 	and.w	r3, r3, #31
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009ec:	e00f      	b.n	8000a0e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009ee:	490b      	ldr	r1, [pc, #44]	; (8000a1c <NVIC_Init+0xbc>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	095b      	lsrs	r3, r3, #5
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	f003 031f 	and.w	r3, r3, #31
 8000a02:	2201      	movs	r2, #1
 8000a04:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a06:	f100 0320 	add.w	r3, r0, #32
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <ADC_DeInit+0x2c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d109      	bne.n	8000a44 <ADC_DeInit+0x24>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000a30:	2101      	movs	r1, #1
 8000a32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a36:	f000 fcf1 	bl	800141c <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a40:	f000 fcec 	bl	800141c <RCC_APB2PeriphResetCmd>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40012400 	.word	0x40012400

08000a50 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a72:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	021a      	lsls	r2, r3, #8
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <ADC_Init+0xa4>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000aa8:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8000aca:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	7d1b      	ldrb	r3, [r3, #20]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000ada:	7afb      	ldrb	r3, [r7, #11]
 8000adc:	051b      	lsls	r3, r3, #20
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	c0fff7fd 	.word	0xc0fff7fd

08000af8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information (Prescaler) for ADC1 peripheral.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)                           
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));

  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg = ADC->CCR;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <ADC_CommonInit+0x34>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Clear ADCPRE bit */ 
  tmpreg &= CR_CLEAR_MASK;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b10:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: ADC prescaler according to ADC_Prescaler */                
  tmpreg |= (uint32_t)(ADC_CommonInitStruct->ADC_Prescaler);        
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
                
  /* Write to ADC CCR */
  ADC->CCR = tmpreg;
 8000b1c:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <ADC_CommonInit+0x34>)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6053      	str	r3, [r2, #4]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40012700 	.word	0x40012700

08000b30 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d006      	beq.n	8000b50 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000b4e:	e005      	b.n	8000b5c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f023 0201 	bic.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	4608      	mov	r0, r1
 8000b72:	4611      	mov	r1, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	70fb      	strb	r3, [r7, #3]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	70bb      	strb	r3, [r7, #2]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	2b1d      	cmp	r3, #29
 8000b8e:	d923      	bls.n	8000bd8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b94:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	f1a3 021e 	sub.w	r2, r3, #30
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000bb4:	7879      	ldrb	r1, [r7, #1]
 8000bb6:	78fb      	ldrb	r3, [r7, #3]
 8000bb8:	f1a3 021e 	sub.w	r2, r3, #30
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000bd6:	e06c      	b.n	8000cb2 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b13      	cmp	r3, #19
 8000bdc:	d923      	bls.n	8000c26 <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	f1a3 0214 	sub.w	r2, r3, #20
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000c02:	7879      	ldrb	r1, [r7, #1]
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	f1a3 0214 	sub.w	r2, r3, #20
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	e045      	b.n	8000cb2 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2b09      	cmp	r3, #9
 8000c2a:	d923      	bls.n	8000c74 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	f1a3 020a 	sub.w	r2, r3, #10
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2207      	movs	r2, #7
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000c50:	7879      	ldrb	r1, [r7, #1]
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	f1a3 020a 	sub.w	r2, r3, #10
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	e01e      	b.n	8000cb2 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	2207      	movs	r2, #7
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c94:	7879      	ldrb	r1, [r7, #1]
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000cb2:	78bb      	ldrb	r3, [r7, #2]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d821      	bhi.n	8000cfc <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000cbe:	78bb      	ldrb	r3, [r7, #2]
 8000cc0:	1e5a      	subs	r2, r3, #1
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	221f      	movs	r2, #31
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000cda:	78f9      	ldrb	r1, [r7, #3]
 8000cdc:	78bb      	ldrb	r3, [r7, #2]
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000cfa:	e095      	b.n	8000e28 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000cfc:	78bb      	ldrb	r3, [r7, #2]
 8000cfe:	2b0c      	cmp	r3, #12
 8000d00:	d821      	bhi.n	8000d46 <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	1fda      	subs	r2, r3, #7
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	221f      	movs	r2, #31
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000d24:	78f9      	ldrb	r1, [r7, #3]
 8000d26:	78bb      	ldrb	r3, [r7, #2]
 8000d28:	1fda      	subs	r2, r3, #7
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d44:	e070      	b.n	8000e28 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8000d46:	78bb      	ldrb	r3, [r7, #2]
 8000d48:	2b12      	cmp	r3, #18
 8000d4a:	d823      	bhi.n	8000d94 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d50:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000d52:	78bb      	ldrb	r3, [r7, #2]
 8000d54:	f1a3 020d 	sub.w	r2, r3, #13
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	221f      	movs	r2, #31
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d70:	78f9      	ldrb	r1, [r7, #3]
 8000d72:	78bb      	ldrb	r3, [r7, #2]
 8000d74:	f1a3 020d 	sub.w	r2, r3, #13
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d92:	e049      	b.n	8000e28 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8000d94:	78bb      	ldrb	r3, [r7, #2]
 8000d96:	2b18      	cmp	r3, #24
 8000d98:	d823      	bhi.n	8000de2 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000da0:	78bb      	ldrb	r3, [r7, #2]
 8000da2:	f1a3 0213 	sub.w	r2, r3, #19
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	221f      	movs	r2, #31
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000dbe:	78f9      	ldrb	r1, [r7, #3]
 8000dc0:	78bb      	ldrb	r3, [r7, #2]
 8000dc2:	f1a3 0213 	sub.w	r2, r3, #19
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000de0:	e022      	b.n	8000e28 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000de8:	78bb      	ldrb	r3, [r7, #2]
 8000dea:	f1a3 0219 	sub.w	r2, r3, #25
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	221f      	movs	r2, #31
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4013      	ands	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000e06:	78f9      	ldrb	r1, [r7, #3]
 8000e08:	78bb      	ldrb	r3, [r7, #2]
 8000e0a:	f1a3 0219 	sub.w	r2, r3, #25
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	609a      	str	r2, [r3, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000e72:	e005      	b.n	8000e80 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
  }
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= ADC_CR2_DDS;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
  }
}
 8000eaa:	e005      	b.n	8000eb8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  }
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee2:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ef2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000efe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000f5e:	e006      	b.n	8000f6e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000f68:	4013      	ands	r3, r2
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e07e      	b.n	8001092 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f94:	2201      	movs	r2, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d16d      	bne.n	800108c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <GPIO_Init+0x76>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d136      	bne.n	800105c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	401a      	ands	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	795b      	ldrb	r3, [r3, #5]
 800100c:	4619      	mov	r1, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	889b      	ldrh	r3, [r3, #4]
 8001020:	b29a      	uxth	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	b29b      	uxth	r3, r3
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	b29b      	uxth	r3, r3
 8001032:	4013      	ands	r3, r2
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	799b      	ldrb	r3, [r3, #6]
 8001046:	4619      	mov	r1, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	b29b      	uxth	r3, r3
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	b29b      	uxth	r3, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2103      	movs	r1, #3
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	79db      	ldrb	r3, [r3, #7]
 800107c:	4619      	mov	r1, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	f67f af7d 	bls.w	8000f94 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	8a9b      	ldrh	r3, [r3, #20]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	4053      	eors	r3, r2
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	829a      	strh	r2, [r3, #20]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010e4:	787a      	ldrb	r2, [r7, #1]
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	b29b      	uxth	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	210f      	movs	r1, #15
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	ea02 0103 	and.w	r1, r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f100 0208 	add.w	r2, r0, #8
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	b29b      	uxth	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <RCC_HSICmd+0x1c>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	42470000 	.word	0x42470000

0800117c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <RCC_SYSCLKConfig+0x34>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <RCC_SYSCLKConfig+0x34>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6093      	str	r3, [r2, #8]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011d4:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	2b0c      	cmp	r3, #12
 80011e2:	d865      	bhi.n	80012b0 <RCC_GetClocksFreq+0xfc>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <RCC_GetClocksFreq+0x38>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	08001221 	.word	0x08001221
 80011f0:	080012b1 	.word	0x080012b1
 80011f4:	080012b1 	.word	0x080012b1
 80011f8:	080012b1 	.word	0x080012b1
 80011fc:	08001241 	.word	0x08001241
 8001200:	080012b1 	.word	0x080012b1
 8001204:	080012b1 	.word	0x080012b1
 8001208:	080012b1 	.word	0x080012b1
 800120c:	08001249 	.word	0x08001249
 8001210:	080012b1 	.word	0x080012b1
 8001214:	080012b1 	.word	0x080012b1
 8001218:	080012b1 	.word	0x080012b1
 800121c:	08001251 	.word	0x08001251
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001220:	4b4c      	ldr	r3, [pc, #304]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001228:	0b5b      	lsrs	r3, r3, #13
 800122a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	601a      	str	r2, [r3, #0]
      break;
 800123e:	e047      	b.n	80012d0 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a45      	ldr	r2, [pc, #276]	; (8001358 <RCC_GetClocksFreq+0x1a4>)
 8001244:	601a      	str	r2, [r3, #0]
      break;
 8001246:	e043      	b.n	80012d0 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <RCC_GetClocksFreq+0x1a8>)
 800124c:	601a      	str	r2, [r3, #0]
      break;
 800124e:	e03f      	b.n	80012d0 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001250:	4b40      	ldr	r3, [pc, #256]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001258:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001262:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <RCC_GetClocksFreq+0x1ac>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	0d9b      	lsrs	r3, r3, #22
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	4a33      	ldr	r2, [pc, #204]	; (8001358 <RCC_GetClocksFreq+0x1a4>)
 800128c:	fb02 f203 	mul.w	r2, r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fbb2 f2f3 	udiv	r2, r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800129a:	e019      	b.n	80012d0 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <RCC_GetClocksFreq+0x1a8>)
 80012a0:	fb02 f203 	mul.w	r2, r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
      }
      break;
 80012ae:	e00f      	b.n	80012d0 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012b8:	0b5b      	lsrs	r3, r3, #13
 80012ba:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
      break;
 80012ce:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <RCC_GetClocksFreq+0x1b0>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001300:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001308:	4a16      	ldr	r2, [pc, #88]	; (8001364 <RCC_GetClocksFreq+0x1b0>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	40da      	lsrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <RCC_GetClocksFreq+0x1a0>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001328:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	0adb      	lsrs	r3, r3, #11
 800132e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <RCC_GetClocksFreq+0x1b0>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	40da      	lsrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
}
 8001348:	bf00      	nop
 800134a:	3724      	adds	r7, #36	; 0x24
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	00f42400 	.word	0x00f42400
 800135c:	007a1200 	.word	0x007a1200
 8001360:	20000000 	.word	0x20000000
 8001364:	2000000c 	.word	0x2000000c

08001368 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800137a:	4909      	ldr	r1, [pc, #36]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 800137e:	69da      	ldr	r2, [r3, #28]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4313      	orrs	r3, r2
 8001384:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001386:	e006      	b.n	8001396 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001388:	4905      	ldr	r1, [pc, #20]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	43db      	mvns	r3, r3
 8001392:	4013      	ands	r3, r2
 8001394:	61cb      	str	r3, [r1, #28]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013b6:	4909      	ldr	r1, [pc, #36]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80013c2:	e006      	b.n	80013d2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013c4:	4905      	ldr	r1, [pc, #20]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4013      	ands	r3, r2
 80013d0:	620b      	str	r3, [r1, #32]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800

080013e0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <RCC_APB1PeriphClockCmd+0x38>)
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <RCC_APB1PeriphClockCmd+0x38>)
 80013f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80013fe:	e006      	b.n	800140e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001400:	4905      	ldr	r1, [pc, #20]	; (8001418 <RCC_APB1PeriphClockCmd+0x38>)
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <RCC_APB1PeriphClockCmd+0x38>)
 8001404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	43db      	mvns	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40023800 	.word	0x40023800

0800141c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <RCC_APB2PeriphResetCmd+0x38>)
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <RCC_APB2PeriphResetCmd+0x38>)
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800143a:	e006      	b.n	800144a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800143c:	4905      	ldr	r1, [pc, #20]	; (8001454 <RCC_APB2PeriphResetCmd+0x38>)
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <RCC_APB2PeriphResetCmd+0x38>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	43db      	mvns	r3, r3
 8001446:	4013      	ands	r3, r2
 8001448:	614b      	str	r3, [r1, #20]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40023800 	.word	0x40023800

08001458 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	095b      	lsrs	r3, r3, #5
 8001472:	b2db      	uxtb	r3, r3
 8001474:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <RCC_GetFlagStatus+0x60>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e002      	b.n	800148a <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <RCC_GetFlagStatus+0x60>)
 8001486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001488:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	74fb      	strb	r3, [r7, #19]
 80014a6:	e001      	b.n	80014ac <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80014ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40023800 	.word	0x40023800

080014bc <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d6:	d00b      	beq.n	80014f0 <TIM_TimeBaseInit+0x34>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <TIM_TimeBaseInit+0x90>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d007      	beq.n	80014f0 <TIM_TimeBaseInit+0x34>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <TIM_TimeBaseInit+0x94>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d003      	beq.n	80014f0 <TIM_TimeBaseInit+0x34>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a1a      	ldr	r2, [pc, #104]	; (8001554 <TIM_TimeBaseInit+0x98>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d108      	bne.n	8001502 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014f6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	885a      	ldrh	r2, [r3, #2]
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	4313      	orrs	r3, r2
 8001500:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <TIM_TimeBaseInit+0x9c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00c      	beq.n	8001524 <TIM_TimeBaseInit+0x68>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <TIM_TimeBaseInit+0xa0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d008      	beq.n	8001524 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001518:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	891a      	ldrh	r2, [r3, #8]
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	4313      	orrs	r3, r2
 8001522:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	89fa      	ldrh	r2, [r7, #14]
 8001528:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	829a      	strh	r2, [r3, #20]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40000400 	.word	0x40000400
 8001550:	40000800 	.word	0x40000800
 8001554:	40000c00 	.word	0x40000c00
 8001558:	40001000 	.word	0x40001000
 800155c:	40001400 	.word	0x40001400

08001560 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001582:	e007      	b.n	8001594 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	801a      	strh	r2, [r3, #0]
  }
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop

080015a0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	899b      	ldrh	r3, [r3, #12]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	4313      	orrs	r3, r2
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80015c6:	e009      	b.n	80015dc <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	899b      	ldrh	r3, [r3, #12]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	819a      	strh	r2, [r3, #12]
  }
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	81bb      	strh	r3, [r7, #12]
 80015fc:	2300      	movs	r3, #0
 80015fe:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	8a1b      	ldrh	r3, [r3, #16]
 8001604:	b29a      	uxth	r2, r3
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	4013      	ands	r3, r2
 800160a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	899b      	ldrh	r3, [r3, #12]
 8001610:	b29a      	uxth	r2, r3
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	4013      	ands	r3, r2
 8001616:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001618:	89bb      	ldrh	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <TIM_GetITStatus+0x42>
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop

0800163c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	43db      	mvns	r3, r3
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	821a      	strh	r2, [r3, #16]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	8a1b      	ldrh	r3, [r3, #16]
 800167a:	b29b      	uxth	r3, r3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	88db      	ldrh	r3, [r3, #6]
 800168a:	461a      	mov	r2, r3
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	4313      	orrs	r3, r2
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	899b      	ldrh	r3, [r3, #12]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016a8:	f023 030c 	bic.w	r3, r3, #12
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	889a      	ldrh	r2, [r3, #4]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	891b      	ldrh	r3, [r3, #8]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016be:	4313      	orrs	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	4313      	orrs	r3, r2
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8a9b      	ldrh	r3, [r3, #20]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	899b      	ldrh	r3, [r3, #12]
 80016e6:	461a      	mov	r2, r3
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	4313      	orrs	r3, r2
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd5a 	bl	80011b4 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <USART_Init+0x160>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d102      	bne.n	800170e <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	e001      	b.n	8001712 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	899b      	ldrh	r3, [r3, #12]
 8001716:	b29b      	uxth	r3, r3
 8001718:	b21b      	sxth	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	da0c      	bge.n	8001738 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800171e:	6a3a      	ldr	r2, [r7, #32]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009a      	lsls	r2, r3, #2
 8001728:	441a      	add	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e00b      	b.n	8001750 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001738:	6a3a      	ldr	r2, [r7, #32]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009a      	lsls	r2, r3, #2
 8001742:	441a      	add	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <USART_Init+0x164>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	2264      	movs	r2, #100	; 0x64
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	899b      	ldrh	r3, [r3, #12]
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21b      	sxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	da0c      	bge.n	8001794 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	3332      	adds	r3, #50	; 0x32
 8001780:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <USART_Init+0x164>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178e:	4313      	orrs	r3, r2
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	e00b      	b.n	80017ac <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	3332      	adds	r3, #50	; 0x32
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <USART_Init+0x164>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a8:	4313      	orrs	r3, r2
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	811a      	strh	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013800 	.word	0x40013800
 80017c0:	51eb851f 	.word	0x51eb851f

080017c4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	899b      	ldrh	r3, [r3, #12]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80017e6:	e007      	b.n	80017f8 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	899b      	ldrh	r3, [r3, #12]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	819a      	strh	r2, [r3, #12]
  }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001816:	b29a      	uxth	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	809a      	strh	r2, [r3, #4]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	b2db      	uxtb	r3, r3
 8001854:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800185e:	2201      	movs	r2, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d103      	bne.n	8001876 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	330c      	adds	r3, #12
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e009      	b.n	800188a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d103      	bne.n	8001884 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3310      	adds	r3, #16
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e002      	b.n	800188a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3314      	adds	r3, #20
 8001888:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800188a:	787b      	ldrb	r3, [r7, #1]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	6811      	ldr	r1, [r2, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800189c:	e006      	b.n	80018ac <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	6811      	ldr	r1, [r2, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	43d2      	mvns	r2, r2
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
  }
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	4013      	ands	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <_Z15initSYSTEMCLOCKv>:

int q = 0; // pocitadlo strednej hodnoty

extern bool map; // premenna zapnuteho/vypnuteho mapovania

void initSYSTEMCLOCK(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

	RCC_HSICmd(ENABLE);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff fc31 	bl	800115c <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 80018fa:	2021      	movs	r0, #33	; 0x21
 80018fc:	f7ff fdac 	bl	8001458 <RCC_GetFlagStatus>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d000      	beq.n	8001912 <_Z15initSYSTEMCLOCKv+0x22>
 8001910:	e7f3      	b.n	80018fa <_Z15initSYSTEMCLOCKv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fc32 	bl	800117c <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8001918:	f000 fb84 	bl	8002024 <SystemCoreClockUpdate>

	//uint32_t SystemClockValue = SystemCoreClock;

	return;
 800191c:	bf00      	nop

}
 800191e:	bd80      	pop	{r7, pc}

08001920 <_Z22initTIMERwithINTERRUPTt>:

void initTIMERwithINTERRUPT(uint16_t TimerVal) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800192a:	2101      	movs	r1, #1
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff fd57 	bl	80013e0 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 16000-1;
 8001932:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001936:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001938:	2300      	movs	r3, #0
 800193a:	81fb      	strh	r3, [r7, #14]
	timerInitStructure.TIM_Period = TimerVal-1;
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	3b01      	subs	r3, #1
 8001940:	613b      	str	r3, [r7, #16]
	timerInitStructure.TIM_ClockDivision = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001950:	f7ff fdb4 	bl	80014bc <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8001954:	2101      	movs	r1, #1
 8001956:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800195a:	f7ff fe01 	bl	8001560 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); // povolenie update eventu
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001966:	f7ff fe1b 	bl	80015a0 <TIM_ITConfig>

    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 800196a:	231c      	movs	r3, #28
 800196c:	723b      	strb	r3, [r7, #8]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	727b      	strb	r3, [r7, #9]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	72bb      	strb	r3, [r7, #10]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8001976:	2301      	movs	r3, #1
 8001978:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&nvicStructure);
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe ffee 	bl	8000960 <NVIC_Init>

    return;
 8001984:	bf00      	nop
}
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8001992:	2101      	movs	r1, #1
 8001994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001998:	f7ff fe26 	bl	80015e8 <TIM_GetITStatus>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d072      	beq.n	8001a92 <TIM2_IRQHandler+0x106>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80019ac:	2101      	movs	r1, #1
 80019ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019b2:	f7ff fe43 	bl	800163c <TIM_ClearITPendingBit>

		GPIO_ToggleBits(GPIOA,GPIO_Pin_5);
 80019b6:	2120      	movs	r1, #32
 80019b8:	4838      	ldr	r0, [pc, #224]	; (8001a9c <TIM2_IRQHandler+0x110>)
 80019ba:	f7ff fb73 	bl	80010a4 <GPIO_ToggleBits>

		// premapovanie hodnot
		if (map==true) {
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <TIM2_IRQHandler+0x114>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <TIM2_IRQHandler+0x46>
			int_pointer = remap(ADC_Values);
 80019c6:	4837      	ldr	r0, [pc, #220]	; (8001aa4 <TIM2_IRQHandler+0x118>)
 80019c8:	f000 f874 	bl	8001ab4 <_Z5remapPh>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <TIM2_IRQHandler+0x11c>)
 80019d0:	601a      	str	r2, [r3, #0]
		}

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	dc5a      	bgt.n	8001a92 <TIM2_IRQHandler+0x106>

			// konverzia hodnoty z ADC na pole charov, funkcia vracia smernik
			if (map==true) {
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <TIM2_IRQHandler+0x114>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <TIM2_IRQHandler+0x74>
				char_pointer = INTconversionCHAR(*(int_pointer+j));
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <TIM2_IRQHandler+0x11c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f960 	bl	8001cb8 <_Z17INTconversionCHARh>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <TIM2_IRQHandler+0x120>)
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e009      	b.n	8001a14 <TIM2_IRQHandler+0x88>
			} else {
				char_pointer = INTconversionCHAR(*(ADC_Values+j));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <TIM2_IRQHandler+0x118>)
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f955 	bl	8001cb8 <_Z17INTconversionCHARh>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <TIM2_IRQHandler+0x120>)
 8001a12:	601a      	str	r2, [r3, #0]
			}

			int i = *(char_pointer); // na 1. mieste je pocet cifier
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <TIM2_IRQHandler+0x120>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	603b      	str	r3, [r7, #0]
			while (i>0) {
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dd1a      	ble.n	8001a58 <TIM2_IRQHandler+0xcc>
				while (USART_GetFlagStatus(USART2,USART_FLAG_TXE)==0) {};
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <TIM2_IRQHandler+0x124>)
 8001a26:	f7ff ff47 	bl	80018b8 <USART_GetFlagStatus>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d000      	beq.n	8001a3c <TIM2_IRQHandler+0xb0>
 8001a3a:	e7f2      	b.n	8001a22 <TIM2_IRQHandler+0x96>
				USART_SendData(USART2,*(char_pointer+i));
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <TIM2_IRQHandler+0x120>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <TIM2_IRQHandler+0x124>)
 8001a4c:	f7ff feda 	bl	8001804 <USART_SendData>
				i--;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	603b      	str	r3, [r7, #0]
			} else {
				char_pointer = INTconversionCHAR(*(ADC_Values+j));
			}

			int i = *(char_pointer); // na 1. mieste je pocet cifier
			while (i>0) {
 8001a56:	e7e1      	b.n	8001a1c <TIM2_IRQHandler+0x90>
				USART_SendData(USART2,*(char_pointer+i));
				i--;
			}

			// najprv space a pootm new line
			while (USART_GetFlagStatus(USART2,USART_FLAG_TXE)==0) {};
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <TIM2_IRQHandler+0x124>)
 8001a5c:	f7ff ff2c 	bl	80018b8 <USART_GetFlagStatus>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf0c      	ite	eq
 8001a66:	2301      	moveq	r3, #1
 8001a68:	2300      	movne	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d000      	beq.n	8001a72 <TIM2_IRQHandler+0xe6>
 8001a70:	e7f2      	b.n	8001a58 <TIM2_IRQHandler+0xcc>
			if (j==0) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d104      	bne.n	8001a82 <TIM2_IRQHandler+0xf6>
				USART_SendData(USART2,32);
 8001a78:	2120      	movs	r1, #32
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <TIM2_IRQHandler+0x124>)
 8001a7c:	f7ff fec2 	bl	8001804 <USART_SendData>
 8001a80:	e003      	b.n	8001a8a <TIM2_IRQHandler+0xfe>
			} else {
				USART_SendData(USART2,13);
 8001a82:	210d      	movs	r1, #13
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <TIM2_IRQHandler+0x124>)
 8001a86:	f7ff febd 	bl	8001804 <USART_SendData>
		if (map==true) {
			int_pointer = remap(ADC_Values);
		}

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	e7a1      	b.n	80019d6 <TIM2_IRQHandler+0x4a>
		USART_SendData(USART1,ADC_Values[1]);
		*/

	}

	return;
 8001a92:	bf00      	nop
}
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	2000008c 	.word	0x2000008c
 8001aa4:	2000001c 	.word	0x2000001c
 8001aa8:	20000074 	.word	0x20000074
 8001aac:	20000078 	.word	0x20000078
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <_Z5remapPh>:

int *remap(uint8_t ADC_Values[2]) {
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	// funkcia vracia smernik na nove pole

	static int int_array[2];
	int rozsah;

	if (q<10) {
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <_Z5remapPh+0x1f4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	dc04      	bgt.n	8001ace <_Z5remapPh+0x1a>
		q++;
 8001ac4:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <_Z5remapPh+0x1f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <_Z5remapPh+0x1f4>)
 8001acc:	6013      	str	r3, [r2, #0]
	}

	for (int j=0; j<2; j++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	f300 80e2 	bgt.w	8001c9e <_Z5remapPh+0x1ea>

		// nastavenie defaultnych strednych hodnot
		if (q==10) {
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <_Z5remapPh+0x1f4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d112      	bne.n	8001b08 <_Z5remapPh+0x54>
			default_values[j*3+1] = ADC_Values[j];
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	3301      	adds	r3, #1
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	440a      	add	r2, r1
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4a6d      	ldr	r2, [pc, #436]	; (8001cac <_Z5remapPh+0x1f8>)
 8001af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (j==1) {
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d102      	bne.n	8001b08 <_Z5remapPh+0x54>
				q = 11;
 8001b02:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <_Z5remapPh+0x1f4>)
 8001b04:	220b      	movs	r2, #11
 8001b06:	601a      	str	r2, [r3, #0]
			}
		}

		// nastavenie novych minimalnych/maximalnych hodnot
		if (ADC_Values[j]<default_values[j*3+0]) {
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a64      	ldr	r2, [pc, #400]	; (8001cac <_Z5remapPh+0x1f8>)
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	4299      	cmp	r1, r3
 8001b22:	da0c      	bge.n	8001b3e <_Z5remapPh+0x8a>
			default_values[j*3+0] = ADC_Values[j];
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	440a      	add	r2, r1
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <_Z5remapPh+0x1f8>)
 8001b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b3c:	e01b      	b.n	8001b76 <_Z5remapPh+0xc2>
		} else if (ADC_Values[j]>default_values[j*3+2]) {
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4619      	mov	r1, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	3302      	adds	r3, #2
 8001b52:	4a56      	ldr	r2, [pc, #344]	; (8001cac <_Z5remapPh+0x1f8>)
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	4299      	cmp	r1, r3
 8001b5a:	dd0c      	ble.n	8001b76 <_Z5remapPh+0xc2>
			default_values[j*3+2] = ADC_Values[j];
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3302      	adds	r3, #2
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	440a      	add	r2, r1
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <_Z5remapPh+0x1f8>)
 8001b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		// premapovanie
		if (ADC_Values[j]>default_values[j*3+1]) {
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a48      	ldr	r2, [pc, #288]	; (8001cac <_Z5remapPh+0x1f8>)
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	4299      	cmp	r1, r3
 8001b92:	dd12      	ble.n	8001bba <_Z5remapPh+0x106>
			rozsah = default_values[j*3+2]-default_values[j*3+1]; // max-stred
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	4a43      	ldr	r2, [pc, #268]	; (8001cac <_Z5remapPh+0x1f8>)
 8001ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a3f      	ldr	r2, [pc, #252]	; (8001cac <_Z5remapPh+0x1f8>)
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	1acb      	subs	r3, r1, r3
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e01f      	b.n	8001bfa <_Z5remapPh+0x146>
		} else if (ADC_Values[j]<default_values[j*3+1]) {
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a37      	ldr	r2, [pc, #220]	; (8001cac <_Z5remapPh+0x1f8>)
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	4299      	cmp	r1, r3
 8001bd6:	da10      	bge.n	8001bfa <_Z5remapPh+0x146>
			rozsah = default_values[j*3+1]-default_values[j*3+0]; // stred-min
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a32      	ldr	r2, [pc, #200]	; (8001cac <_Z5remapPh+0x1f8>)
 8001be4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <_Z5remapPh+0x1f8>)
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	1acb      	subs	r3, r1, r3
 8001bf8:	60fb      	str	r3, [r7, #12]
		}

		int_array[j] = 128+(ADC_Values[j]-default_values[j*3+1])*(128/(double)rozsah);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a27      	ldr	r2, [pc, #156]	; (8001cac <_Z5remapPh+0x1f8>)
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	1acb      	subs	r3, r1, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc02 	bl	8000420 <__aeabi_i2d>
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7fe fbfd 	bl	8000420 <__aeabi_i2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	4920      	ldr	r1, [pc, #128]	; (8001cb0 <_Z5remapPh+0x1fc>)
 8001c30:	f7fe fd86 	bl	8000740 <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fc56 	bl	80004ec <__aeabi_dmul>
 8001c40:	4603      	mov	r3, r0
 8001c42:	460c      	mov	r4, r1
 8001c44:	4618      	mov	r0, r3
 8001c46:	4621      	mov	r1, r4
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <_Z5remapPh+0x1fc>)
 8001c4e:	f7fe fa9b 	bl	8000188 <__adddf3>
 8001c52:	4603      	mov	r3, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	4618      	mov	r0, r3
 8001c58:	4621      	mov	r1, r4
 8001c5a:	f7fe fe59 	bl	8000910 <__aeabi_d2iz>
 8001c5e:	4601      	mov	r1, r0
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_Z5remapPh+0x200>)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// pre istotu obmedzenie
		if (int_array[j]>255) {
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_Z5remapPh+0x200>)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	2bff      	cmp	r3, #255	; 0xff
 8001c72:	dd05      	ble.n	8001c80 <_Z5remapPh+0x1cc>
			int_array[j] = 255;
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <_Z5remapPh+0x200>)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	21ff      	movs	r1, #255	; 0xff
 8001c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001c7e:	e00a      	b.n	8001c96 <_Z5remapPh+0x1e2>
		} else if (int_array[j]<0) {
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <_Z5remapPh+0x200>)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da04      	bge.n	8001c96 <_Z5remapPh+0x1e2>
			int_array[j] = 0;
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <_Z5remapPh+0x200>)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2100      	movs	r1, #0
 8001c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (q<10) {
		q++;
	}

	for (int j=0; j<2; j++) {
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	e719      	b.n	8001ad2 <_Z5remapPh+0x1e>
			int_array[j] = 0;
		}

	}

	return int_array;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_Z5remapPh+0x200>)
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca8:	2000007c 	.word	0x2000007c
 8001cac:	20000020 	.word	0x20000020
 8001cb0:	40600000 	.word	0x40600000
 8001cb4:	20000080 	.word	0x20000080

08001cb8 <_Z17INTconversionCHARh>:

char *INTconversionCHAR(uint8_t value) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]

	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <_Z17INTconversionCHARh+0x64>)
 8001cca:	1898      	adds	r0, r3, r2
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <_Z17INTconversionCHARh+0x68>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	08d9      	lsrs	r1, r3, #3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3330      	adds	r3, #48	; 0x30
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	7003      	strb	r3, [r0, #0]
		value /= 10;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <_Z17INTconversionCHARh+0x68>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	71fb      	strb	r3, [r7, #7]
		j++;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d000      	beq.n	8001d02 <_Z17INTconversionCHARh+0x4a>
 8001d00:	e7e1      	b.n	8001cc6 <_Z17INTconversionCHARh+0xe>
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
		value /= 10;
		j++;
	} while (value);

	*(char_array) = j-1; // teraz uz vieme pocet cifier, zapis na 1. miesto v poli
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <_Z17INTconversionCHARh+0x64>)
 8001d0c:	701a      	strb	r2, [r3, #0]

	return char_array;
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <_Z17INTconversionCHARh+0x64>)
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000088 	.word	0x20000088
 8001d20:	cccccccd 	.word	0xcccccccd

08001d24 <_Z9initUSARTv>:
void initUSART(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct;    // this is for the GPIO pins used as TX and RX
	 USART_InitTypeDef USART_InitStruct;  // this is for the USART1 initilization
	 NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	 RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff fb1b 	bl	8001368 <RCC_AHBPeriphClockCmd>

	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; // Pins 2 (TX) and 3 (RX) are used
 8001d32:	230c      	movs	r3, #12
 8001d34:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			 // the pins are configured as alternate function so the USART peripheral has access to them
 8001d36:	2302      	movs	r3, #2
 8001d38:	773b      	strb	r3, [r7, #28]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;		 // this defines the IO speed and has nothing to do with the baudrate!
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	777b      	strb	r3, [r7, #29]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;		 // this defines the output type as push pull mode (as opposed to open drain)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	77bb      	strb	r3, [r7, #30]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;			 // this activates the pullup resistors on the IO pins
 8001d42:	2300      	movs	r3, #0
 8001d44:	77fb      	strb	r3, [r7, #31]
	 GPIO_Init(GPIOA, &GPIO_InitStruct);				 // now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	481f      	ldr	r0, [pc, #124]	; (8001dcc <_Z9initUSARTv+0xa8>)
 8001d4e:	f7ff f913 	bl	8000f78 <GPIO_Init>

	 GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001d52:	2207      	movs	r2, #7
 8001d54:	2102      	movs	r1, #2
 8001d56:	481d      	ldr	r0, [pc, #116]	; (8001dcc <_Z9initUSARTv+0xa8>)
 8001d58:	f7ff f9b8 	bl	80010cc <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	2103      	movs	r1, #3
 8001d60:	481a      	ldr	r0, [pc, #104]	; (8001dcc <_Z9initUSARTv+0xa8>)
 8001d62:	f7ff f9b3 	bl	80010cc <GPIO_PinAFConfig>

	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001d66:	2101      	movs	r1, #1
 8001d68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d6c:	f7ff fb38 	bl	80013e0 <RCC_APB1PeriphClockCmd>

	 USART_InitStruct.USART_BaudRate = 9600;				 // the baudrate is set to the value we passed into this init function
 8001d70:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001d74:	60bb      	str	r3, [r7, #8]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001d76:	2300      	movs	r3, #0
 8001d78:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;	 // we want 1 stop bit (standard)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	81fb      	strh	r3, [r7, #14]
	 USART_InitStruct.USART_Parity = USART_Parity_No;		 // we don't want a parity bit (standard)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	823b      	strh	r3, [r7, #16]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001d82:	2300      	movs	r3, #0
 8001d84:	82bb      	strh	r3, [r7, #20]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001d86:	230c      	movs	r3, #12
 8001d88:	827b      	strh	r3, [r7, #18]
	 USART_Init(USART2, &USART_InitStruct);					 // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <_Z9initUSARTv+0xac>)
 8001d92:	f7ff fc63 	bl	800165c <USART_Init>

	 USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8001d96:	2201      	movs	r2, #1
 8001d98:	f240 5125 	movw	r1, #1317	; 0x525
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <_Z9initUSARTv+0xac>)
 8001d9e:	f7ff fd43 	bl	8001828 <USART_ITConfig>

	 NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;		  // we want to configure the USART1 interrupts
 8001da2:	2326      	movs	r3, #38	; 0x26
 8001da4:	713b      	strb	r3, [r7, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8; // this sets the priority group of the USART1 interrupts
 8001da6:	2308      	movs	r3, #8
 8001da8:	717b      	strb	r3, [r7, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		  // this sets the subpriority inside the group
 8001daa:	2300      	movs	r3, #0
 8001dac:	71bb      	strb	r3, [r7, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			  // the USART1 interrupts are globally enabled
 8001dae:	2301      	movs	r3, #1
 8001db0:	71fb      	strb	r3, [r7, #7]
	 NVIC_Init(&NVIC_InitStructure);							  // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fdd3 	bl	8000960 <NVIC_Init>

	 USART_Cmd(USART2, ENABLE);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <_Z9initUSARTv+0xac>)
 8001dbe:	f7ff fd01 	bl	80017c4 <USART_Cmd>

	 return;
 8001dc2:	bf00      	nop
}
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <_Z14initADCwithDMAv>:

void initADCwithDMA(void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b094      	sub	sp, #80	; 0x50
 8001dd8:	af00      	add	r7, sp, #0
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    DMA_InitTypeDef       DMA_InitStruct;
    GPIO_InitTypeDef      GPIO_InitStruct;

    // Enable DMA2 clocks
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001de0:	f7ff fac2 	bl	8001368 <RCC_AHBPeriphClockCmd>
    // Enable GPIOA clocks
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001de4:	2101      	movs	r1, #1
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff fabe 	bl	8001368 <RCC_AHBPeriphClockCmd>
    // Enable ADC1 clocks
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001dec:	2101      	movs	r1, #1
 8001dee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001df2:	f7ff fad7 	bl	80013a4 <RCC_APB2PeriphClockCmd>

    // DMA1 Stream0 channel0 configuration
    DMA_InitStruct.DMA_M2M = DMA_M2M_Disable;
 8001df6:	2300      	movs	r3, #0
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR; // ADC1's data register
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <_Z14initADCwithDMAv+0x100>)
 8001dfc:	60bb      	str	r3, [r7, #8]
    DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t)&ADC_Values;
 8001dfe:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <_Z14initADCwithDMAv+0x104>)
 8001e00:	60fb      	str	r3, [r7, #12]
    DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralSRC;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
    DMA_InitStruct.DMA_BufferSize = 2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
    DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
    DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	61fb      	str	r3, [r7, #28]
    DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; // Reads 8 bit values
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
    DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; // Stores 8 bit values
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8001e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_Init(DMA1_Channel1, &DMA_InitStruct);
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	482c      	ldr	r0, [pc, #176]	; (8001edc <_Z14initADCwithDMAv+0x108>)
 8001e2c:	f7ff f84a 	bl	8000ec4 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
 8001e30:	2101      	movs	r1, #1
 8001e32:	482a      	ldr	r0, [pc, #168]	; (8001edc <_Z14initADCwithDMAv+0x108>)
 8001e34:	f7ff f884 	bl	8000f40 <DMA_Cmd>

    // Configure GPIO pins
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // PA0 - Channel 0, PA1 - Channel 1
 8001e38:	2303      	movs	r3, #3
 8001e3a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN; // The pins are configured in analog mode
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; // We don't need any pull up or pull down
 8001e40:	2300      	movs	r3, #0
 8001e42:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &GPIO_InitStruct); // Initialize GPIOA pins with the configuration
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4825      	ldr	r0, [pc, #148]	; (8001ee0 <_Z14initADCwithDMAv+0x10c>)
 8001e4a:	f7ff f895 	bl	8000f78 <GPIO_Init>

    // ADC Common Init
    ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8001e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
    ADC_CommonInit(&ADC_CommonInitStruct);
 8001e54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fe4d 	bl	8000af8 <ADC_CommonInit>

    // ADC1 Init
    ADC_DeInit(ADC1);
 8001e5e:	4821      	ldr	r0, [pc, #132]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001e60:	f7fe fdde 	bl	8000a20 <ADC_DeInit>
    ADC_InitStruct.ADC_Resolution = ADC_Resolution_8b; // Input voltage is converted into a 8bit int (max 255)
 8001e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
    ADC_InitStruct.ADC_ScanConvMode = ENABLE; // The scan is configured in multiple channels
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    ADC_InitStruct.ADC_ContinuousConvMode = ENABLE; // Continuous conversion: input signal is sampled more than once
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    ADC_InitStruct.ADC_ExternalTrigConv = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
    ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	643b      	str	r3, [r7, #64]	; 0x40
    ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right; // Data converted will be shifted to right
 8001e7e:	2300      	movs	r3, #0
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
    ADC_InitStruct.ADC_NbrOfConversion = 2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    ADC_Init(ADC1, &ADC_InitStruct); // Initialize ADC with the configuration
 8001e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4815      	ldr	r0, [pc, #84]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001e90:	f7fe fdde 	bl	8000a50 <ADC_Init>

    // Select the channels to be read from
    ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_96Cycles); // PA0
 8001e94:	2305      	movs	r3, #5
 8001e96:	2201      	movs	r2, #1
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4812      	ldr	r0, [pc, #72]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001e9c:	f7fe fe64 	bl	8000b68 <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_96Cycles); // PA1
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001ea8:	f7fe fe5e 	bl	8000b68 <ADC_RegularChannelConfig>

    // Enable DMA request after last transfer (Single-ADC mode)
    ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8001eac:	2101      	movs	r1, #1
 8001eae:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001eb0:	f7fe ffec 	bl	8000e8c <ADC_DMARequestAfterLastTransferCmd>
    // Enable ADC1 DMA
    ADC_DMACmd(ADC1, ENABLE);
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001eb8:	f7fe ffcc 	bl	8000e54 <ADC_DMACmd>
    // Enable ADC1
    ADC_Cmd(ADC1, ENABLE);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001ec0:	f7fe fe36 	bl	8000b30 <ADC_Cmd>
    // Start ADC1 Software Conversion
    ADC_SoftwareStartConv(ADC1);
 8001ec4:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <_Z14initADCwithDMAv+0x110>)
 8001ec6:	f7fe ffb5 	bl	8000e34 <ADC_SoftwareStartConv>

    return;
 8001eca:	bf00      	nop
}
 8001ecc:	3750      	adds	r7, #80	; 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40012458 	.word	0x40012458
 8001ed8:	2000001c 	.word	0x2000001c
 8001edc:	40026008 	.word	0x40026008
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40012400 	.word	0x40012400

08001ee8 <main>:
**===========================================================================
*/

bool map; // premenna zapnuteho/vypnuteho mapovania

int main(void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0

	initSYSTEMCLOCK();
 8001eec:	f7ff fd00 	bl	80018f0 <_Z15initSYSTEMCLOCKv>

	map = true; // true/false - mapovanie zapnute/vypnute
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <main+0x20>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]

	initUSART();
 8001ef6:	f7ff ff15 	bl	8001d24 <_Z9initUSARTv>
	initTIMERwithINTERRUPT(100); // TIM2, param: hodnota resetu v ms
 8001efa:	2064      	movs	r0, #100	; 0x64
 8001efc:	f7ff fd10 	bl	8001920 <_Z22initTIMERwithINTERRUPTt>

	initADCwithDMA();
 8001f00:	f7ff ff68 	bl	8001dd4 <_Z14initADCwithDMAv>

	while (1) {
 8001f04:	e7fe      	b.n	8001f04 <main+0x1c>
 8001f06:	bf00      	nop
 8001f08:	2000008c 	.word	0x2000008c

08001f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f12:	e003      	b.n	8001f1c <LoopCopyDataInit>

08001f14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001f16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f1a:	3104      	adds	r1, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001f20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f24:	d3f6      	bcc.n	8001f14 <CopyDataInit>
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001f28:	e002      	b.n	8001f30 <LoopFillZerobss>

08001f2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f2c:	f842 3b04 	str.w	r3, [r2], #4

08001f30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001f32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f34:	d3f9      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f36:	f000 f841 	bl	8001fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f000 f9af 	bl	800229c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3e:	f7ff ffd3 	bl	8001ee8 <main>
  bx lr
 8001f42:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f44:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001f48:	08002308 	.word	0x08002308
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f50:	20000058 	.word	0x20000058
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001f54:	20000058 	.word	0x20000058
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001f58:	20000090 	.word	0x20000090

08001f5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_IRQHandler>
	...

08001f60 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001f70:	e7fe      	b.n	8001f70 <HardFault_Handler+0x4>
 8001f72:	bf00      	nop

08001f74 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>
 8001f7a:	bf00      	nop

08001f7c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001f80:	e7fe      	b.n	8001f80 <BusFault_Handler+0x4>
 8001f82:	bf00      	nop

08001f84 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>
 8001f8a:	bf00      	nop

08001f8c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <SystemInit+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <SystemInit+0x5c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001fcc:	4912      	ldr	r1, [pc, #72]	; (8002018 <SystemInit+0x5c>)
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <SystemInit+0x5c>)
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <SystemInit+0x60>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <SystemInit+0x5c>)
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <SystemInit+0x5c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001fe2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001fe6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <SystemInit+0x5c>)
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <SystemInit+0x5c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <SystemInit+0x5c>)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <SystemInit+0x5c>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001ffe:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SystemInit+0x5c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8002006:	f000 f8b9 	bl	800217c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SystemInit+0x64>)
 800200c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002010:	609a      	str	r2, [r3, #8]
#endif
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	88ffc00c 	.word	0x88ffc00c
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <SystemCoreClockUpdate+0x140>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d864      	bhi.n	8002118 <SystemCoreClockUpdate+0xf4>
 800204e:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <SystemCoreClockUpdate+0x30>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	08002089 	.word	0x08002089
 8002058:	08002119 	.word	0x08002119
 800205c:	08002119 	.word	0x08002119
 8002060:	08002119 	.word	0x08002119
 8002064:	080020a9 	.word	0x080020a9
 8002068:	08002119 	.word	0x08002119
 800206c:	08002119 	.word	0x08002119
 8002070:	08002119 	.word	0x08002119
 8002074:	080020b1 	.word	0x080020b1
 8002078:	08002119 	.word	0x08002119
 800207c:	08002119 	.word	0x08002119
 8002080:	08002119 	.word	0x08002119
 8002084:	080020b9 	.word	0x080020b9
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <SystemCoreClockUpdate+0x140>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002090:	0b5b      	lsrs	r3, r3, #13
 8002092:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <SystemCoreClockUpdate+0x144>)
 80020a4:	601a      	str	r2, [r3, #0]
      break;
 80020a6:	e047      	b.n	8002138 <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <SystemCoreClockUpdate+0x144>)
 80020aa:	4a30      	ldr	r2, [pc, #192]	; (800216c <SystemCoreClockUpdate+0x148>)
 80020ac:	601a      	str	r2, [r3, #0]
      break;
 80020ae:	e043      	b.n	8002138 <SystemCoreClockUpdate+0x114>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <SystemCoreClockUpdate+0x144>)
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <SystemCoreClockUpdate+0x14c>)
 80020b4:	601a      	str	r2, [r3, #0]
      break;
 80020b6:	e03f      	b.n	8002138 <SystemCoreClockUpdate+0x114>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <SystemCoreClockUpdate+0x140>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020c0:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <SystemCoreClockUpdate+0x140>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80020ca:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	0c9b      	lsrs	r3, r3, #18
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <SystemCoreClockUpdate+0x150>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	0d9b      	lsrs	r3, r3, #22
 80020dc:	3301      	adds	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80020e0:	4b20      	ldr	r3, [pc, #128]	; (8002164 <SystemCoreClockUpdate+0x140>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <SystemCoreClockUpdate+0xe0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <SystemCoreClockUpdate+0x148>)
 80020f4:	fb02 f203 	mul.w	r2, r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <SystemCoreClockUpdate+0x144>)
 8002100:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8002102:	e019      	b.n	8002138 <SystemCoreClockUpdate+0x114>
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <SystemCoreClockUpdate+0x14c>)
 8002108:	fb02 f203 	mul.w	r2, r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <SystemCoreClockUpdate+0x144>)
 8002114:	6013      	str	r3, [r2, #0]
      }
      break;
 8002116:	e00f      	b.n	8002138 <SystemCoreClockUpdate+0x114>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <SystemCoreClockUpdate+0x140>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002120:	0b5b      	lsrs	r3, r3, #13
 8002122:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <SystemCoreClockUpdate+0x144>)
 8002134:	601a      	str	r2, [r3, #0]
      break;
 8002136:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <SystemCoreClockUpdate+0x140>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <SystemCoreClockUpdate+0x154>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <SystemCoreClockUpdate+0x144>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <SystemCoreClockUpdate+0x144>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	20000038 	.word	0x20000038
 800216c:	00f42400 	.word	0x00f42400
 8002170:	007a1200 	.word	0x007a1200
 8002174:	2000003c 	.word	0x2000003c
 8002178:	20000048 	.word	0x20000048

0800217c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800218a:	4a41      	ldr	r2, [pc, #260]	; (8002290 <SetSysClock+0x114>)
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <SetSysClock+0x114>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <SetSysClock+0x114>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <SetSysClock+0x38>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80021b2:	d1f0      	bne.n	8002196 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <SetSysClock+0x114>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80021c0:	2301      	movs	r3, #1
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	e001      	b.n	80021ca <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d15a      	bne.n	8002286 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80021d0:	4a30      	ldr	r2, [pc, #192]	; (8002294 <SetSysClock+0x118>)
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <SetSysClock+0x118>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80021dc:	4a2d      	ldr	r2, [pc, #180]	; (8002294 <SetSysClock+0x118>)
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <SetSysClock+0x118>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80021e8:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <SetSysClock+0x118>)
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <SetSysClock+0x118>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <SetSysClock+0x114>)
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <SetSysClock+0x114>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <SetSysClock+0x11c>)
 8002202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002206:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8002208:	bf00      	nop
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <SetSysClock+0x11c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002216:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <SetSysClock+0x114>)
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <SetSysClock+0x114>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <SetSysClock+0x114>)
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <SetSysClock+0x114>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <SetSysClock+0x114>)
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <SetSysClock+0x114>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <SetSysClock+0x114>)
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <SetSysClock+0x114>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002238:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <SetSysClock+0x114>)
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <SetSysClock+0x114>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8002244:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <SetSysClock+0x114>)
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <SetSysClock+0x114>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002250:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002252:	bf00      	nop
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <SetSysClock+0x114>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f9      	beq.n	8002254 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <SetSysClock+0x114>)
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <SetSysClock+0x114>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <SetSysClock+0x114>)
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <SetSysClock+0x114>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f043 0303 	orr.w	r3, r3, #3
 8002276:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002278:	bf00      	nop
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <SetSysClock+0x114>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d1f9      	bne.n	800227a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40023800 	.word	0x40023800
 8002294:	40023c00 	.word	0x40023c00
 8002298:	40007000 	.word	0x40007000

0800229c <__libc_init_array>:
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <__libc_init_array+0x3c>)
 800229e:	b570      	push	{r4, r5, r6, lr}
 80022a0:	461e      	mov	r6, r3
 80022a2:	4c0e      	ldr	r4, [pc, #56]	; (80022dc <__libc_init_array+0x40>)
 80022a4:	2500      	movs	r5, #0
 80022a6:	1ae4      	subs	r4, r4, r3
 80022a8:	10a4      	asrs	r4, r4, #2
 80022aa:	42a5      	cmp	r5, r4
 80022ac:	d004      	beq.n	80022b8 <__libc_init_array+0x1c>
 80022ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b2:	4798      	blx	r3
 80022b4:	3501      	adds	r5, #1
 80022b6:	e7f8      	b.n	80022aa <__libc_init_array+0xe>
 80022b8:	f000 f816 	bl	80022e8 <_init>
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <__libc_init_array+0x44>)
 80022be:	4c09      	ldr	r4, [pc, #36]	; (80022e4 <__libc_init_array+0x48>)
 80022c0:	461e      	mov	r6, r3
 80022c2:	1ae4      	subs	r4, r4, r3
 80022c4:	10a4      	asrs	r4, r4, #2
 80022c6:	2500      	movs	r5, #0
 80022c8:	42a5      	cmp	r5, r4
 80022ca:	d004      	beq.n	80022d6 <__libc_init_array+0x3a>
 80022cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022d0:	4798      	blx	r3
 80022d2:	3501      	adds	r5, #1
 80022d4:	e7f8      	b.n	80022c8 <__libc_init_array+0x2c>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	08002300 	.word	0x08002300
 80022dc:	08002300 	.word	0x08002300
 80022e0:	08002300 	.word	0x08002300
 80022e4:	08002304 	.word	0x08002304

080022e8 <_init>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr

080022f4 <_fini>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr
